#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyPhongNet.DAO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyPhongNet")]
	public partial class QuanLyPhongNETDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAfterPayClient(AfterPayClient instance);
    partial void UpdateAfterPayClient(AfterPayClient instance);
    partial void DeleteAfterPayClient(AfterPayClient instance);
    partial void InsertBeforePayClient(BeforePayClient instance);
    partial void UpdateBeforePayClient(BeforePayClient instance);
    partial void DeleteBeforePayClient(BeforePayClient instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertGroupClient(GroupClient instance);
    partial void UpdateGroupClient(GroupClient instance);
    partial void DeleteGroupClient(GroupClient instance);
    partial void InsertGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void UpdateGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void DeleteGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertLoginMember(LoginMember instance);
    partial void UpdateLoginMember(LoginMember instance);
    partial void DeleteLoginMember(LoginMember instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMemberInformation(MemberInformation instance);
    partial void UpdateMemberInformation(MemberInformation instance);
    partial void DeleteMemberInformation(MemberInformation instance);
    partial void InsertOrderCard(OrderCard instance);
    partial void UpdateOrderCard(OrderCard instance);
    partial void DeleteOrderCard(OrderCard instance);
    partial void InsertOrderDrink(OrderDrink instance);
    partial void UpdateOrderDrink(OrderDrink instance);
    partial void DeleteOrderDrink(OrderDrink instance);
    partial void InsertOrderFood(OrderFood instance);
    partial void UpdateOrderFood(OrderFood instance);
    partial void DeleteOrderFood(OrderFood instance);
    partial void InsertTheCard(TheCard instance);
    partial void UpdateTheCard(TheCard instance);
    partial void DeleteTheCard(TheCard instance);
    partial void InsertTheUser(TheUser instance);
    partial void UpdateTheUser(TheUser instance);
    partial void DeleteTheUser(TheUser instance);
    #endregion
		
		public QuanLyPhongNETDataContext() : 
				base(global::QuanLyPhongNet.DAO.Properties.Settings.Default.QuanLyPhongNetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AfterPayClient> AfterPayClients
		{
			get
			{
				return this.GetTable<AfterPayClient>();
			}
		}
		
		public System.Data.Linq.Table<TransactionDiary> TransactionDiaries
		{
			get
			{
				return this.GetTable<TransactionDiary>();
			}
		}
		
		public System.Data.Linq.Table<BeforePayClient> BeforePayClients
		{
			get
			{
				return this.GetTable<BeforePayClient>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<GroupClient> GroupClients
		{
			get
			{
				return this.GetTable<GroupClient>();
			}
		}
		
		public System.Data.Linq.Table<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this.GetTable<GroupClientAndGroupUser>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<LoginMember> LoginMembers
		{
			get
			{
				return this.GetTable<LoginMember>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<MemberInformation> MemberInformations
		{
			get
			{
				return this.GetTable<MemberInformation>();
			}
		}
		
		public System.Data.Linq.Table<OrderCard> OrderCards
		{
			get
			{
				return this.GetTable<OrderCard>();
			}
		}
		
		public System.Data.Linq.Table<OrderDrink> OrderDrinks
		{
			get
			{
				return this.GetTable<OrderDrink>();
			}
		}
		
		public System.Data.Linq.Table<OrderFood> OrderFoods
		{
			get
			{
				return this.GetTable<OrderFood>();
			}
		}
		
		public System.Data.Linq.Table<TheCard> TheCards
		{
			get
			{
				return this.GetTable<TheCard>();
			}
		}
		
		public System.Data.Linq.Table<TheUser> TheUsers
		{
			get
			{
				return this.GetTable<TheUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AfterPayClient")]
	public partial class AfterPayClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _BillID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<double> _PriceUnit;
		
		private System.Nullable<double> _TotalMoney;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnTotalMoneyChanging(System.Nullable<double> value);
    partial void OnTotalMoneyChanged();
    #endregion
		
		public AfterPayClient()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMoney", DbType="Float")]
		public System.Nullable<double> TotalMoney
		{
			get
			{
				return this._TotalMoney;
			}
			set
			{
				if ((this._TotalMoney != value))
				{
					this.OnTotalMoneyChanging(value);
					this.SendPropertyChanging();
					this._TotalMoney = value;
					this.SendPropertyChanged("TotalMoney");
					this.OnTotalMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_AfterPayClient", Storage="_Bill", ThisKey="BillID", OtherKey="BillID", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.AfterPayClients.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.AfterPayClients.Add(this);
						this._BillID = value.BillID;
					}
					else
					{
						this._BillID = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AfterPayClient", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.AfterPayClients.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.AfterPayClients.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionDiary")]
	public partial class TransactionDiary
	{
		
		private string _UserName;
		
		private System.Nullable<int> _memberID;
		
		private System.Nullable<System.DateTime> _TransacDate;
		
		private System.Nullable<System.TimeSpan> _AddTime;
		
		private System.Nullable<double> _AddMoney;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private string _Note;
		
		public TransactionDiary()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(60)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int")]
		public System.Nullable<int> memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					this._memberID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransacDate", DbType="Date")]
		public System.Nullable<System.DateTime> TransacDate
		{
			get
			{
				return this._TransacDate;
			}
			set
			{
				if ((this._TransacDate != value))
				{
					this._TransacDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this._AddTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddMoney", DbType="Float")]
		public System.Nullable<double> AddMoney
		{
			get
			{
				return this._AddMoney;
			}
			set
			{
				if ((this._AddMoney != value))
				{
					this._AddMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this._UseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(120)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeforePayClient")]
	public partial class BeforePayClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _BillID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<System.TimeSpan> _LeftTime;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnLeftTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLeftTimeChanged();
    #endregion
		
		public BeforePayClient()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> LeftTime
		{
			get
			{
				return this._LeftTime;
			}
			set
			{
				if ((this._LeftTime != value))
				{
					this.OnLeftTimeChanging(value);
					this.SendPropertyChanging();
					this._LeftTime = value;
					this.SendPropertyChanged("LeftTime");
					this.OnLeftTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BeforePayClient", Storage="_Bill", ThisKey="BillID", OtherKey="BillID", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BeforePayClients.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BeforePayClients.Add(this);
						this._BillID = value.BillID;
					}
					else
					{
						this._BillID = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BeforePayClient", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.BeforePayClients.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.BeforePayClients.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillID;
		
		private string _FoundedUser;
		
		private System.Nullable<System.DateTime> _FoundedDate;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntitySet<AfterPayClient> _AfterPayClients;
		
		private EntitySet<BeforePayClient> _BeforePayClients;
		
		private EntityRef<TheUser> _TheUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnFoundedUserChanging(string value);
    partial void OnFoundedUserChanged();
    partial void OnFoundedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundedDateChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public Bill()
		{
			this._AfterPayClients = new EntitySet<AfterPayClient>(new Action<AfterPayClient>(this.attach_AfterPayClients), new Action<AfterPayClient>(this.detach_AfterPayClients));
			this._BeforePayClients = new EntitySet<BeforePayClient>(new Action<BeforePayClient>(this.attach_BeforePayClients), new Action<BeforePayClient>(this.detach_BeforePayClients));
			this._TheUser = default(EntityRef<TheUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedUser", DbType="NVarChar(60)")]
		public string FoundedUser
		{
			get
			{
				return this._FoundedUser;
			}
			set
			{
				if ((this._FoundedUser != value))
				{
					if (this._TheUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoundedUserChanging(value);
					this.SendPropertyChanging();
					this._FoundedUser = value;
					this.SendPropertyChanged("FoundedUser");
					this.OnFoundedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedDate", DbType="Date")]
		public System.Nullable<System.DateTime> FoundedDate
		{
			get
			{
				return this._FoundedDate;
			}
			set
			{
				if ((this._FoundedDate != value))
				{
					this.OnFoundedDateChanging(value);
					this.SendPropertyChanging();
					this._FoundedDate = value;
					this.SendPropertyChanged("FoundedDate");
					this.OnFoundedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_AfterPayClient", Storage="_AfterPayClients", ThisKey="BillID", OtherKey="BillID")]
		public EntitySet<AfterPayClient> AfterPayClients
		{
			get
			{
				return this._AfterPayClients;
			}
			set
			{
				this._AfterPayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BeforePayClient", Storage="_BeforePayClients", ThisKey="BillID", OtherKey="BillID")]
		public EntitySet<BeforePayClient> BeforePayClients
		{
			get
			{
				return this._BeforePayClients;
			}
			set
			{
				this._BeforePayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheUser_Bill", Storage="_TheUser", ThisKey="FoundedUser", OtherKey="UserName", IsForeignKey=true)]
		public TheUser TheUser
		{
			get
			{
				return this._TheUser.Entity;
			}
			set
			{
				TheUser previousValue = this._TheUser.Entity;
				if (((previousValue != value) 
							|| (this._TheUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TheUser.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._TheUser.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._FoundedUser = value.UserName;
					}
					else
					{
						this._FoundedUser = default(string);
					}
					this.SendPropertyChanged("TheUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryName;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<Food> _Foods;
		
		private EntitySet<TheCard> _TheCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			this._TheCards = new EntitySet<TheCard>(new Action<TheCard>(this.attach_TheCards), new Action<TheCard>(this.detach_TheCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Drink", Storage="_Drinks", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Foods", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TheCard", Storage="_TheCards", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<TheCard> TheCards
		{
			get
			{
				return this._TheCards;
			}
			set
			{
				this._TheCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_TheCards(TheCard entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_TheCards(TheCard entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private string _GroupClientName;
		
		private string _StatusClient;
		
		private string _Note;
		
		private EntitySet<AfterPayClient> _AfterPayClients;
		
		private EntitySet<BeforePayClient> _BeforePayClients;
		
		private EntitySet<LoginMember> _LoginMembers;
		
		private EntitySet<OrderCard> _OrderCards;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntitySet<OrderFood> _OrderFoods;
		
		private EntityRef<GroupClient> _GroupClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnGroupClientNameChanging(string value);
    partial void OnGroupClientNameChanged();
    partial void OnStatusClientChanging(string value);
    partial void OnStatusClientChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Client()
		{
			this._AfterPayClients = new EntitySet<AfterPayClient>(new Action<AfterPayClient>(this.attach_AfterPayClients), new Action<AfterPayClient>(this.detach_AfterPayClients));
			this._BeforePayClients = new EntitySet<BeforePayClient>(new Action<BeforePayClient>(this.attach_BeforePayClients), new Action<BeforePayClient>(this.detach_BeforePayClients));
			this._LoginMembers = new EntitySet<LoginMember>(new Action<LoginMember>(this.attach_LoginMembers), new Action<LoginMember>(this.detach_LoginMembers));
			this._OrderCards = new EntitySet<OrderCard>(new Action<OrderCard>(this.attach_OrderCards), new Action<OrderCard>(this.detach_OrderCards));
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._OrderFoods = new EntitySet<OrderFood>(new Action<OrderFood>(this.attach_OrderFoods), new Action<OrderFood>(this.detach_OrderFoods));
			this._GroupClient = default(EntityRef<GroupClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupClientName", DbType="NVarChar(30)")]
		public string GroupClientName
		{
			get
			{
				return this._GroupClientName;
			}
			set
			{
				if ((this._GroupClientName != value))
				{
					if (this._GroupClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupClientNameChanging(value);
					this.SendPropertyChanging();
					this._GroupClientName = value;
					this.SendPropertyChanged("GroupClientName");
					this.OnGroupClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusClient", DbType="VarChar(50)")]
		public string StatusClient
		{
			get
			{
				return this._StatusClient;
			}
			set
			{
				if ((this._StatusClient != value))
				{
					this.OnStatusClientChanging(value);
					this.SendPropertyChanging();
					this._StatusClient = value;
					this.SendPropertyChanged("StatusClient");
					this.OnStatusClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AfterPayClient", Storage="_AfterPayClients", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<AfterPayClient> AfterPayClients
		{
			get
			{
				return this._AfterPayClients;
			}
			set
			{
				this._AfterPayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BeforePayClient", Storage="_BeforePayClients", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<BeforePayClient> BeforePayClients
		{
			get
			{
				return this._BeforePayClients;
			}
			set
			{
				this._BeforePayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LoginMember", Storage="_LoginMembers", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<LoginMember> LoginMembers
		{
			get
			{
				return this._LoginMembers;
			}
			set
			{
				this._LoginMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderCard", Storage="_OrderCards", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderCard> OrderCards
		{
			get
			{
				return this._OrderCards;
			}
			set
			{
				this._OrderCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderDrink", Storage="_OrderDrinks", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderFood", Storage="_OrderFoods", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderFood> OrderFoods
		{
			get
			{
				return this._OrderFoods;
			}
			set
			{
				this._OrderFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_Client", Storage="_GroupClient", ThisKey="GroupClientName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupClient GroupClient
		{
			get
			{
				return this._GroupClient.Entity;
			}
			set
			{
				GroupClient previousValue = this._GroupClient.Entity;
				if (((previousValue != value) 
							|| (this._GroupClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupClient.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._GroupClient.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._GroupClientName = value.GroupName;
					}
					else
					{
						this._GroupClientName = default(string);
					}
					this.SendPropertyChanged("GroupClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drink")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrinkID;
		
		private string _DrinkName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrinkIDChanging(int value);
    partial void OnDrinkIDChanged();
    partial void OnDrinkNameChanging(string value);
    partial void OnDrinkNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public Drink()
		{
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkName", DbType="NVarChar(100)")]
		public string DrinkName
		{
			get
			{
				return this._DrinkName;
			}
			set
			{
				if ((this._DrinkName != value))
				{
					this.OnDrinkNameChanging(value);
					this.SendPropertyChanging();
					this._DrinkName = value;
					this.SendPropertyChanged("DrinkName");
					this.OnDrinkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_OrderDrink", Storage="_OrderDrinks", ThisKey="DrinkID", OtherKey="DrinkID")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Drink", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodID;
		
		private string _FoodName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderFood> _OrderFoods;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodIDChanging(int value);
    partial void OnFoodIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public Food()
		{
			this._OrderFoods = new EntitySet<OrderFood>(new Action<OrderFood>(this.attach_OrderFoods), new Action<OrderFood>(this.detach_OrderFoods));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(100)")]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderFood", Storage="_OrderFoods", ThisKey="FoodID", OtherKey="FoodID")]
		public EntitySet<OrderFood> OrderFoods
		{
			get
			{
				return this._OrderFoods;
			}
			set
			{
				this._OrderFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupClient")]
	public partial class GroupClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupName;
		
		private string _Discription;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<GroupClientAndGroupUser> _GroupClientAndGroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    #endregion
		
		public GroupClient()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._GroupClientAndGroupUsers = new EntitySet<GroupClientAndGroupUser>(new Action<GroupClientAndGroupUser>(this.attach_GroupClientAndGroupUsers), new Action<GroupClientAndGroupUser>(this.detach_GroupClientAndGroupUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(120)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_Client", Storage="_Clients", ThisKey="GroupName", OtherKey="GroupClientName")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_GroupClientAndGroupUser", Storage="_GroupClientAndGroupUsers", ThisKey="GroupName", OtherKey="GroupClientName")]
		public EntitySet<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this._GroupClientAndGroupUsers;
			}
			set
			{
				this._GroupClientAndGroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = null;
		}
		
		private void attach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = this;
		}
		
		private void detach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupClientAndGroupUser")]
	public partial class GroupClientAndGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupUserName;
		
		private string _GroupClientName;
		
		private System.Nullable<double> _GiaDichVu;
		
		private EntityRef<GroupClient> _GroupClient;
		
		private EntityRef<GroupUser> _GroupUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupUserNameChanging(string value);
    partial void OnGroupUserNameChanged();
    partial void OnGroupClientNameChanging(string value);
    partial void OnGroupClientNameChanged();
    partial void OnGiaDichVuChanging(System.Nullable<double> value);
    partial void OnGiaDichVuChanged();
    #endregion
		
		public GroupClientAndGroupUser()
		{
			this._GroupClient = default(EntityRef<GroupClient>);
			this._GroupUser = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUserName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupUserName
		{
			get
			{
				return this._GroupUserName;
			}
			set
			{
				if ((this._GroupUserName != value))
				{
					if (this._GroupUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserNameChanging(value);
					this.SendPropertyChanging();
					this._GroupUserName = value;
					this.SendPropertyChanged("GroupUserName");
					this.OnGroupUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupClientName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupClientName
		{
			get
			{
				return this._GroupClientName;
			}
			set
			{
				if ((this._GroupClientName != value))
				{
					if (this._GroupClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupClientNameChanging(value);
					this.SendPropertyChanging();
					this._GroupClientName = value;
					this.SendPropertyChanged("GroupClientName");
					this.OnGroupClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaDichVu", DbType="Float")]
		public System.Nullable<double> GiaDichVu
		{
			get
			{
				return this._GiaDichVu;
			}
			set
			{
				if ((this._GiaDichVu != value))
				{
					this.OnGiaDichVuChanging(value);
					this.SendPropertyChanging();
					this._GiaDichVu = value;
					this.SendPropertyChanged("GiaDichVu");
					this.OnGiaDichVuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_GroupClientAndGroupUser", Storage="_GroupClient", ThisKey="GroupClientName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupClient GroupClient
		{
			get
			{
				return this._GroupClient.Entity;
			}
			set
			{
				GroupClient previousValue = this._GroupClient.Entity;
				if (((previousValue != value) 
							|| (this._GroupClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupClient.Entity = null;
						previousValue.GroupClientAndGroupUsers.Remove(this);
					}
					this._GroupClient.Entity = value;
					if ((value != null))
					{
						value.GroupClientAndGroupUsers.Add(this);
						this._GroupClientName = value.GroupName;
					}
					else
					{
						this._GroupClientName = default(string);
					}
					this.SendPropertyChanged("GroupClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_GroupClientAndGroupUser", Storage="_GroupUser", ThisKey="GroupUserName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser
		{
			get
			{
				return this._GroupUser.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser.Entity = null;
						previousValue.GroupClientAndGroupUsers.Remove(this);
					}
					this._GroupUser.Entity = value;
					if ((value != null))
					{
						value.GroupClientAndGroupUsers.Add(this);
						this._GroupUserName = value.GroupName;
					}
					else
					{
						this._GroupUserName = default(string);
					}
					this.SendPropertyChanged("GroupUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupUser")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupName;
		
		private string _TypeName;
		
		private EntitySet<GroupClientAndGroupUser> _GroupClientAndGroupUsers;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<TheUser> _TheUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public GroupUser()
		{
			this._GroupClientAndGroupUsers = new EntitySet<GroupClientAndGroupUser>(new Action<GroupClientAndGroupUser>(this.attach_GroupClientAndGroupUsers), new Action<GroupClientAndGroupUser>(this.detach_GroupClientAndGroupUsers));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._TheUsers = new EntitySet<TheUser>(new Action<TheUser>(this.attach_TheUsers), new Action<TheUser>(this.detach_TheUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(30)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_GroupClientAndGroupUser", Storage="_GroupClientAndGroupUsers", ThisKey="GroupName", OtherKey="GroupUserName")]
		public EntitySet<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this._GroupClientAndGroupUsers;
			}
			set
			{
				this._GroupClientAndGroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_Member", Storage="_Members", ThisKey="GroupName", OtherKey="GroupUser")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_TheUser", Storage="_TheUsers", ThisKey="GroupName", OtherKey="GroupUser")]
		public EntitySet<TheUser> TheUsers
		{
			get
			{
				return this._TheUsers;
			}
			set
			{
				this._TheUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = this;
		}
		
		private void detach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = null;
		}
		
		private void attach_TheUsers(TheUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = this;
		}
		
		private void detach_TheUsers(TheUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginMember")]
	public partial class LoginMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memberID;
		
		private string _ClientName;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<System.TimeSpan> _LeftTime;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIDChanging(int value);
    partial void OnmemberIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnLeftTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLeftTimeChanged();
    #endregion
		
		public LoginMember()
		{
			this._Client = default(EntityRef<Client>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberIDChanging(value);
					this.SendPropertyChanging();
					this._memberID = value;
					this.SendPropertyChanged("memberID");
					this.OnmemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> LeftTime
		{
			get
			{
				return this._LeftTime;
			}
			set
			{
				if ((this._LeftTime != value))
				{
					this.OnLeftTimeChanging(value);
					this.SendPropertyChanging();
					this._LeftTime = value;
					this.SendPropertyChanged("LeftTime");
					this.OnLeftTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LoginMember", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.LoginMembers.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.LoginMembers.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_LoginMember", Storage="_Member", ThisKey="memberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.LoginMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.LoginMembers.Add(this);
						this._memberID = value.MemberID;
					}
					else
					{
						this._memberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _AccountName;
		
		private string _Password;
		
		private string _GroupUser;
		
		private System.Nullable<System.TimeSpan> _CurrentTime;
		
		private System.Nullable<double> _CurrentMoney;
		
		private string _StatusAccount;
		
		private EntitySet<LoginMember> _LoginMembers;
		
		private EntityRef<MemberInformation> _MemberInformation;
		
		private EntityRef<GroupUser> _GroupUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupUserChanging(string value);
    partial void OnGroupUserChanged();
    partial void OnCurrentTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnCurrentTimeChanged();
    partial void OnCurrentMoneyChanging(System.Nullable<double> value);
    partial void OnCurrentMoneyChanged();
    partial void OnStatusAccountChanging(string value);
    partial void OnStatusAccountChanged();
    #endregion
		
		public Member()
		{
			this._LoginMembers = new EntitySet<LoginMember>(new Action<LoginMember>(this.attach_LoginMembers), new Action<LoginMember>(this.detach_LoginMembers));
			this._MemberInformation = default(EntityRef<MemberInformation>);
			this._GroupUser1 = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(30)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUser", DbType="NVarChar(30)")]
		public string GroupUser
		{
			get
			{
				return this._GroupUser;
			}
			set
			{
				if ((this._GroupUser != value))
				{
					if (this._GroupUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserChanging(value);
					this.SendPropertyChanging();
					this._GroupUser = value;
					this.SendPropertyChanged("GroupUser");
					this.OnGroupUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> CurrentTime
		{
			get
			{
				return this._CurrentTime;
			}
			set
			{
				if ((this._CurrentTime != value))
				{
					this.OnCurrentTimeChanging(value);
					this.SendPropertyChanging();
					this._CurrentTime = value;
					this.SendPropertyChanged("CurrentTime");
					this.OnCurrentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentMoney", DbType="Float")]
		public System.Nullable<double> CurrentMoney
		{
			get
			{
				return this._CurrentMoney;
			}
			set
			{
				if ((this._CurrentMoney != value))
				{
					this.OnCurrentMoneyChanging(value);
					this.SendPropertyChanging();
					this._CurrentMoney = value;
					this.SendPropertyChanged("CurrentMoney");
					this.OnCurrentMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusAccount", DbType="NVarChar(30)")]
		public string StatusAccount
		{
			get
			{
				return this._StatusAccount;
			}
			set
			{
				if ((this._StatusAccount != value))
				{
					this.OnStatusAccountChanging(value);
					this.SendPropertyChanging();
					this._StatusAccount = value;
					this.SendPropertyChanged("StatusAccount");
					this.OnStatusAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_LoginMember", Storage="_LoginMembers", ThisKey="MemberID", OtherKey="memberID")]
		public EntitySet<LoginMember> LoginMembers
		{
			get
			{
				return this._LoginMembers;
			}
			set
			{
				this._LoginMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInformation", Storage="_MemberInformation", ThisKey="MemberID", OtherKey="memberID", IsUnique=true, IsForeignKey=false)]
		public MemberInformation MemberInformation
		{
			get
			{
				return this._MemberInformation.Entity;
			}
			set
			{
				MemberInformation previousValue = this._MemberInformation.Entity;
				if (((previousValue != value) 
							|| (this._MemberInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberInformation.Entity = null;
						previousValue.Member = null;
					}
					this._MemberInformation.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("MemberInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_Member", Storage="_GroupUser1", ThisKey="GroupUser", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser1
		{
			get
			{
				return this._GroupUser1.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser1.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser1.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._GroupUser1.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._GroupUser = value.GroupName;
					}
					else
					{
						this._GroupUser = default(string);
					}
					this.SendPropertyChanged("GroupUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberInformation")]
	public partial class MemberInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memberID;
		
		private string _MemberName;
		
		private System.Nullable<System.DateTime> _FoundedDate;
		
		private string _PhoneNumber;
		
		private string _MemberAddress;
		
		private string _Email;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIDChanging(int value);
    partial void OnmemberIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnFoundedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundedDateChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnMemberAddressChanging(string value);
    partial void OnMemberAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public MemberInformation()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberIDChanging(value);
					this.SendPropertyChanging();
					this._memberID = value;
					this.SendPropertyChanged("memberID");
					this.OnmemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="NVarChar(100)")]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedDate", DbType="Date")]
		public System.Nullable<System.DateTime> FoundedDate
		{
			get
			{
				return this._FoundedDate;
			}
			set
			{
				if ((this._FoundedDate != value))
				{
					this.OnFoundedDateChanging(value);
					this.SendPropertyChanging();
					this._FoundedDate = value;
					this.SendPropertyChanged("FoundedDate");
					this.OnFoundedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberAddress", DbType="NVarChar(100)")]
		public string MemberAddress
		{
			get
			{
				return this._MemberAddress;
			}
			set
			{
				if ((this._MemberAddress != value))
				{
					this.OnMemberAddressChanging(value);
					this.SendPropertyChanging();
					this._MemberAddress = value;
					this.SendPropertyChanged("MemberAddress");
					this.OnMemberAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInformation", Storage="_Member", ThisKey="memberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberInformation = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberInformation = this;
						this._memberID = value.MemberID;
					}
					else
					{
						this._memberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderCard")]
	public partial class OrderCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _CardID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<TheCard> _TheCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnCardIDChanging(int value);
    partial void OnCardIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderCard()
		{
			this._Client = default(EntityRef<Client>);
			this._TheCard = default(EntityRef<TheCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					if (this._TheCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderCard", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderCards.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderCards.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheCard_OrderCard", Storage="_TheCard", ThisKey="CardID", OtherKey="CardID", IsForeignKey=true)]
		public TheCard TheCard
		{
			get
			{
				return this._TheCard.Entity;
			}
			set
			{
				TheCard previousValue = this._TheCard.Entity;
				if (((previousValue != value) 
							|| (this._TheCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TheCard.Entity = null;
						previousValue.OrderCards.Remove(this);
					}
					this._TheCard.Entity = value;
					if ((value != null))
					{
						value.OrderCards.Add(this);
						this._CardID = value.CardID;
					}
					else
					{
						this._CardID = default(int);
					}
					this.SendPropertyChanged("TheCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDrink")]
	public partial class OrderDrink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _DrinkID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Drink> _Drink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnDrinkIDChanging(int value);
    partial void OnDrinkIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderDrink()
		{
			this._Client = default(EntityRef<Client>);
			this._Drink = default(EntityRef<Drink>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderDrink", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_OrderDrink", Storage="_Drink", ThisKey="DrinkID", OtherKey="DrinkID", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._DrinkID = value.DrinkID;
					}
					else
					{
						this._DrinkID = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderFood")]
	public partial class OrderFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _FoodID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Food> _Food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnFoodIDChanging(int value);
    partial void OnFoodIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderFood()
		{
			this._Client = default(EntityRef<Client>);
			this._Food = default(EntityRef<Food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderFood", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderFoods.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderFoods.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderFood", Storage="_Food", ThisKey="FoodID", OtherKey="FoodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.OrderFoods.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.OrderFoods.Add(this);
						this._FoodID = value.FoodID;
					}
					else
					{
						this._FoodID = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheCard")]
	public partial class TheCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardID;
		
		private string _CardName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderCard> _OrderCards;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardIDChanging(int value);
    partial void OnCardIDChanged();
    partial void OnCardNameChanging(string value);
    partial void OnCardNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public TheCard()
		{
			this._OrderCards = new EntitySet<OrderCard>(new Action<OrderCard>(this.attach_OrderCards), new Action<OrderCard>(this.detach_OrderCards));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardName", DbType="NVarChar(100)")]
		public string CardName
		{
			get
			{
				return this._CardName;
			}
			set
			{
				if ((this._CardName != value))
				{
					this.OnCardNameChanging(value);
					this.SendPropertyChanging();
					this._CardName = value;
					this.SendPropertyChanged("CardName");
					this.OnCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheCard_OrderCard", Storage="_OrderCards", ThisKey="CardID", OtherKey="CardID")]
		public EntitySet<OrderCard> OrderCards
		{
			get
			{
				return this._OrderCards;
			}
			set
			{
				this._OrderCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TheCard", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.TheCards.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.TheCards.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.TheCard = this;
		}
		
		private void detach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.TheCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheUser")]
	public partial class TheUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Type;
		
		private string _GroupUser;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<GroupUser> _GroupUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnGroupUserChanging(string value);
    partial void OnGroupUserChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public TheUser()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._GroupUser1 = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(30)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUser", DbType="NVarChar(30)")]
		public string GroupUser
		{
			get
			{
				return this._GroupUser;
			}
			set
			{
				if ((this._GroupUser != value))
				{
					if (this._GroupUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserChanging(value);
					this.SendPropertyChanging();
					this._GroupUser = value;
					this.SendPropertyChanged("GroupUser");
					this.OnGroupUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheUser_Bill", Storage="_Bills", ThisKey="UserName", OtherKey="FoundedUser")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_TheUser", Storage="_GroupUser1", ThisKey="GroupUser", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser1
		{
			get
			{
				return this._GroupUser1.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser1.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser1.Entity = null;
						previousValue.TheUsers.Remove(this);
					}
					this._GroupUser1.Entity = value;
					if ((value != null))
					{
						value.TheUsers.Add(this);
						this._GroupUser = value.GroupName;
					}
					else
					{
						this._GroupUser = default(string);
					}
					this.SendPropertyChanged("GroupUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.TheUser = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.TheUser = null;
		}
	}
}
#pragma warning restore 1591
